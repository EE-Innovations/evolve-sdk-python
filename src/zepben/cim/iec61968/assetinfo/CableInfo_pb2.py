"""
Copyright 2019 Zeppelin Bend Pty Ltd
This file is part of cimbend.

cimbend is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

cimbend is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with cimbend.  If not, see <https://www.gnu.org/licenses/>.
"""


# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: zepben/cim/iec61968/assetinfo/CableInfo.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from zepben.cim.iec61968.assetinfo import WireMaterialKind_pb2 as zepben_dot_cim_dot_iec61968_dot_assetinfo_dot_WireMaterialKind__pb2
from zepben.cim.iec61970.base.diagramlayout import DiagramObject_pb2 as zepben_dot_cim_dot_iec61970_dot_base_dot_diagramlayout_dot_DiagramObject__pb2
from zepben.cim.iec61970.base.domain import CurrentFlow_pb2 as zepben_dot_cim_dot_iec61970_dot_base_dot_domain_dot_CurrentFlow__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='zepben/cim/iec61968/assetinfo/CableInfo.proto',
  package='zepben.cim.iec61968.assetinfo',
  syntax='proto3',
  serialized_options=_b('\n*com.zepben.protobuf.cim.iec61968.assetinfoP\001'),
  serialized_pb=_b('\n-zepben/cim/iec61968/assetinfo/CableInfo.proto\x12\x1dzepben.cim.iec61968.assetinfo\x1a\x34zepben/cim/iec61968/assetinfo/WireMaterialKind.proto\x1a:zepben/cim/iec61970/base/diagramlayout/DiagramObject.proto\x1a\x31zepben/cim/iec61970/base/domain/CurrentFlow.proto\"\xfd\x01\n\tCableInfo\x12\x0c\n\x04mRID\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\x42\n\x0cratedCurrent\x18\x03 \x01(\x0b\x32,.zepben.cim.iec61970.base.domain.CurrentFlow\x12\x41\n\x08material\x18\x04 \x01(\x0e\x32/.zepben.cim.iec61968.assetinfo.WireMaterialKind\x12M\n\x0e\x64iagramObjects\x18\x10 \x03(\x0b\x32\x35.zepben.cim.iec61970.base.diagramlayout.DiagramObjectB.\n*com.zepben.protobuf.cim.iec61968.assetinfoP\x01\x62\x06proto3')
  ,
  dependencies=[zepben_dot_cim_dot_iec61968_dot_assetinfo_dot_WireMaterialKind__pb2.DESCRIPTOR,zepben_dot_cim_dot_iec61970_dot_base_dot_diagramlayout_dot_DiagramObject__pb2.DESCRIPTOR,zepben_dot_cim_dot_iec61970_dot_base_dot_domain_dot_CurrentFlow__pb2.DESCRIPTOR,])




_CABLEINFO = _descriptor.Descriptor(
  name='CableInfo',
  full_name='zepben.cim.iec61968.assetinfo.CableInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='mRID', full_name='zepben.cim.iec61968.assetinfo.CableInfo.mRID', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='name', full_name='zepben.cim.iec61968.assetinfo.CableInfo.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ratedCurrent', full_name='zepben.cim.iec61968.assetinfo.CableInfo.ratedCurrent', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='material', full_name='zepben.cim.iec61968.assetinfo.CableInfo.material', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='diagramObjects', full_name='zepben.cim.iec61968.assetinfo.CableInfo.diagramObjects', index=4,
      number=16, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=246,
  serialized_end=499,
)

_CABLEINFO.fields_by_name['ratedCurrent'].message_type = zepben_dot_cim_dot_iec61970_dot_base_dot_domain_dot_CurrentFlow__pb2._CURRENTFLOW
_CABLEINFO.fields_by_name['material'].enum_type = zepben_dot_cim_dot_iec61968_dot_assetinfo_dot_WireMaterialKind__pb2._WIREMATERIALKIND
_CABLEINFO.fields_by_name['diagramObjects'].message_type = zepben_dot_cim_dot_iec61970_dot_base_dot_diagramlayout_dot_DiagramObject__pb2._DIAGRAMOBJECT
DESCRIPTOR.message_types_by_name['CableInfo'] = _CABLEINFO
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

CableInfo = _reflection.GeneratedProtocolMessageType('CableInfo', (_message.Message,), {
  'DESCRIPTOR' : _CABLEINFO,
  '__module__' : 'zepben.cim.iec61968.assetinfo.CableInfo_pb2'
  # @@protoc_insertion_point(class_scope:zepben.cim.iec61968.assetinfo.CableInfo)
  })
_sym_db.RegisterMessage(CableInfo)


DESCRIPTOR._options = None
# @@protoc_insertion_point(module_scope)
