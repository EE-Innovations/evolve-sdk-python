// Copyright 2019 Zeppelin Bend Pty Ltd
// This file is part of cimbend.
// 
// cimbend is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// cimbend is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with cimbend.  If not, see <https://www.gnu.org/licenses/>.


syntax = "proto3";
option java_multiple_files = true;
option java_package = "com.zepben.protobuf.cim.iec61970";
import "zepben/cim/IEC61970/winding/winding.proto";
import "zepben/cim/IEC61970/core.proto";
import "zepben/cim/IEC61970/common.proto";
import "zepben/cim/IEC61970/diagram_layout.proto";
import "google/protobuf/field_mask.proto";

package zepben.cim.iec61970;

/*
* mRID: The ID of this component. Corresponds to CIM mRID. - Required
* name: Name of component - not required
* inService: Whether this equipment is in service
*/

message ACLineSegment {
    string mRID = 1;
    string name = 2;
    bool inService = 3;
    double nominalVoltage = 4;
    double length = 5;
    double r = 6;
    double x = 7;
    double x0 = 8;
    double r0 = 9;
    repeated zepben.cim.iec61970.Terminal terminals = 10;
    repeated zepben.cim.iec61970.PositionPoint posPoints = 11;
    zepben.cim.iec61970.DiagramObjectPoint diagramPoints = 12;
    double ratedCurrent = 13;
    string description = 16;
}

message EnergyConsumer {
    string mRID = 1;
    string name = 2;
    bool inService = 3;
    double nominalVoltage = 4;
    double p = 5;
    double q = 6;
    repeated zepben.cim.iec61970.Terminal terminals = 7;
    repeated zepben.cim.iec61970.PositionPoint posPoints = 8;
    zepben.cim.iec61970.DiagramObjectPoint diagramPoints = 9;
    PhaseShuntConnectionKind connectionKind = 10;
    repeated EnergyConsumerPhase energyConsumerPhase = 11;
    string description = 16;
}

message EnergyConsumerPhase {
    string mRID = 1;
    string name = 2;
    double pfixed = 3;
    double qfixed = 4;
    SinglePhaseKind phase = 5;
    zepben.cim.iec61970.DiagramObjectPoint diagramPoints = 15;
    string description = 16;
}


message EnergySource {
    string mRID = 1;
    string name = 2;
    bool inService = 3;
    double nominalVoltage = 4;
    double activePower = 5;
    double reactivePower = 6;
    double voltageAngle = 7;
    double voltageMagnitude = 8;
    double r = 9;
    double x = 10;
    repeated zepben.cim.iec61970.Terminal terminals = 11;
    repeated zepben.cim.iec61970.PositionPoint posPoints = 12;
    zepben.cim.iec61970.DiagramObjectPoint diagramPoints = 13;
    string description = 16;
}

message PowerTransformer {
    string mRID = 1;
    string name = 2;
    bool inService = 3;
    string vectorGroup = 4;
    repeated PowerTransformerEnd ends = 6;
    repeated zepben.cim.iec61970.Terminal terminals = 7;
    repeated zepben.cim.iec61970.PositionPoint posPoints = 8;
    zepben.cim.iec61970.DiagramObjectPoint diagramPoints = 9;
    google.protobuf.FieldMask mask = 15;
    string description = 16;
}

message PowerTransformerEnd {
    string mRID = 1;
    string name = 2;
    double ratedS = 3;
    double ratedU = 4;
    double r = 5;
    double x = 6;
    double r0 = 7;
    double x0 = 8;
    zepben.cim.iec61970.winding.WindingConnection connectionKind = 9;
    repeated zepben.cim.iec61970.Terminal terminals = 10;
    repeated zepben.cim.iec61970.PositionPoint posPoints = 11;
    zepben.cim.iec61970.DiagramObjectPoint diagramPoints = 12;
    int32 endNumber = 13;
    RatioTapChanger tapChanger = 14;
    google.protobuf.FieldMask mask = 15;
    string description = 16;
}
/* Set of spatial coordinates that determine a point, defined in the coordinate system specified in 'Location.CoordinateSystem'.
 * In this profile we only support the use of longitude and latitude systems. However this may be expanded in the future.
 * Use a single position point instance to describe a point-oriented location.
 * Use a sequence of position points to describe a line-oriented object (physical location of non-point oriented objects like cables or lines),
 * or area of an object (like a substation or a geographical zone - in this case, have first and last position point with the same values).
*/

message RatioTapChanger {
    string mRID = 1;
    string name = 2;
    int32 highStep = 3;
    int32 lowStep = 4;
    double step = 5;
    double stepVoltageIncrement = 6;
    string description = 16;
    zepben.cim.iec61970.DiagramObjectPoint diagramPoints = 17;
}

message Breaker {
    string mRID = 1;
    string name = 2;
    bool inService = 3;
    bool open = 4;
    double nominalVoltage = 5;
    repeated zepben.cim.iec61970.Terminal terminals = 6;
    repeated zepben.cim.iec61970.PositionPoint posPoints = 7;
    zepben.cim.iec61970.DiagramObjectPoint diagramPoints = 8;
    string description = 16;
}

message LinearShuntCompensator {
    double b0PerSection = 1;
    double bPerSection = 2;
    double g0PerSection = 3;
    double gPerSection = 4;
    double sections = 5;
    bool controlEnabled = 6;
}

/* Enumerations */
enum PhaseShuntConnectionKind {
    D = 0;
    Y = 1;
    Yn = 2;
    I = 3;
    G = 4;
}

enum SinglePhaseKind {
    UNKNOWN = 0;
    A = 1;
    B = 2;
    C = 3;
    N = 4;
    s1 = 5;
    s2 = 6;
}

/*
* Just a dummy response message - nothing meaningful is being returned to the client at this point
*/
message Summary {
    string result = 1;
}

