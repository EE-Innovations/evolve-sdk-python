// Copyright 2019 Zeppelin Bend Pty Ltd
// This file is part of cimbend.
// 
// cimbend is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// cimbend is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with cimbend.  If not, see <https://www.gnu.org/licenses/>.


syntax = "proto3";
option java_multiple_files = true;
option java_package = "com.zepben.protobuf.postbox";
import "zepben/cim/iec61970/base/core/BaseVoltage.proto";
import "zepben/cim/iec61970/base/wires/EnergySource.proto";
import "zepben/cim/iec61970/base/wires/AcLineSegment.proto";
import "zepben/cim/iec61970/base/wires/EnergyConsumer.proto";
import "zepben/cim/iec61970/base/wires/PowerTransformer.proto";
import "zepben/cim/iec61970/base/wires/Breaker.proto";
import "zepben/cim/iec61970/base/wires/PerLengthSequenceImpedance.proto";
import "zepben/cim/iec61970/base/diagramlayout/DiagramObject.proto";
import "zepben/cim/iec61968/metering/Meter.proto";
import "zepben/cim/iec61968/metering/MeterReading.proto";
import "zepben/cim/iec61968/metering/UsagePoint.proto";
import "zepben/cim/iec61968/assetinfo/AssetInfo.proto";
import "google/protobuf/any.proto";

package zepben.pb;

service NetworkData {
    rpc recordEnergySource (zepben.cim.iec61970.base.wires.EnergySource) returns (ESResponse);
    rpc recordEnergyConsumer (zepben.cim.iec61970.base.wires.EnergyConsumer) returns (ECResponse);
    rpc recordPowerTransformer (zepben.cim.iec61970.base.wires.PowerTransformer) returns (PTResponse);
    rpc recordAcLineSegment (zepben.cim.iec61970.base.wires.AcLineSegment) returns (ACLSResponse);
    rpc recordDiagramObjectPoint (zepben.cim.iec61970.base.diagramlayout.DiagramObject) returns (Summary);
    rpc recordBreaker (zepben.cim.iec61970.base.wires.Breaker) returns (BreakerResponse);
    rpc createPerLengthSequenceImpedance(zepben.cim.iec61970.base.wires.PerLengthSequenceImpedance) returns (PLSIResponse);
    rpc createBaseVoltage(zepben.cim.iec61970.base.core.BaseVoltage) returns (BVResponse);
    rpc createAssetInfo(AssetInfoRequest) returns (AIResponse);
    rpc createUsagePoint(UsagePointRequest) returns (UPResponse);
    rpc createMeter(MeterRequest) returns (MeterResponse);
    /***** Getters *****/
    rpc getEquipmentContainer(Identity) returns (stream Equipment);
    rpc getWholeNetwork(Identity) returns (stream Equipment);

    rpc getEnergySource (Identity) returns (zepben.cim.iec61970.base.wires.EnergySource);
    rpc getEnergyConsumer (Identity) returns (zepben.cim.iec61970.base.wires.EnergyConsumer);
    rpc getPowerTransformer (Identity) returns (zepben.cim.iec61970.base.wires.PowerTransformer);
    rpc getAcLineSegment (Identity) returns (zepben.cim.iec61970.base.wires.AcLineSegment);
    // TEST FUNCTION, REMOVE LATER
    rpc dumpEjson (Summary) returns (Summary);
    rpc traceDirection (Summary) returns (Summary);
}

service MeterReadings {
    rpc createVoltageReading(MeterReadingRequest) returns (MRResponse);
    rpc createRealPowerReading(MeterReadingRequest) returns (MRResponse);
    rpc createReactivePowerReading(MeterReadingRequest) returns (MRResponse);
    rpc sendMeterReading (zepben.cim.iec61968.metering.Meter) returns (MeterResponse);
    // TODO: This will need to be much smarter and allow some form of bucketing readings.
    rpc getMeterReadings (Identity) returns (stream zepben.cim.iec61968.metering.Meter);
    rpc getVoltageReadings(Identity) returns (stream zepben.cim.iec61968.metering.MeterReading);
    rpc getRealPowerReadings(Identity) returns (stream zepben.cim.iec61968.metering.MeterReading);
    rpc getReactivePowerReadings(Identity) returns (stream zepben.cim.iec61968.metering.MeterReading);
}

message Equipment {
    oneof equipment {
        zepben.cim.iec61970.base.wires.EnergySource es = 1;
        zepben.cim.iec61970.base.wires.EnergyConsumer ec = 2;
        zepben.cim.iec61970.base.wires.PowerTransformer pt = 3;
        zepben.cim.iec61970.base.wires.AcLineSegment acls = 4;
        zepben.cim.iec61970.base.wires.Breaker br = 5;
        zepben.cim.iec61970.base.core.BaseVoltage bv = 6;
        zepben.cim.iec61970.base.wires.PerLengthSequenceImpedance si = 7;
        zepben.cim.iec61968.assetinfo.AssetInfo ai = 8;
        zepben.cim.iec61968.metering.Meter mt = 9;
        zepben.cim.iec61968.metering.UsagePoint up = 10;

        google.protobuf.Any other = 16;
    }
}

message Summary {
    string msg = 1;
}

message MeterRequest {
    int64 message_id = 1;
    zepben.cim.iec61968.metering.Meter meter = 2;
}

message MeterReadingRequest {
    int64 message_id = 1;
    zepben.cim.iec61968.metering.MeterReading meterReading = 2;
}

message UsagePointRequest {
    int64 message_id = 1;
    zepben.cim.iec61968.metering.UsagePoint usagePoint = 2;
}

message UPResponse {
    string msg = 1;
}

message MRResponse {
    string msg = 1;
    zepben.cim.iec61968.metering.MeterReading meterReading = 2;
}

message AssetInfoRequest {
    int64 message_id = 1;
    zepben.cim.iec61968.assetinfo.AssetInfo assetInfo = 2;
}

message AIResponse {
    string msg = 1;
}

message BVResponse {
    string msg = 1;
}

message PLSIResponse {
    string msg = 1;
}

message MeterResponse {
    string msg = 1;
}

message Identity {
    string mRID = 1;
}

message ESResponse {
    string msg = 1;
}

message ECResponse {
    string msg = 1;
}

message ACLSResponse {
    string msg = 1;
}

message PTResponse {
    string msg = 1;
}

message BreakerResponse {
    string msg = 1;
}
